// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require(['data'], function(Gamedata) {
    var DEBUG_MODE, app, clone, dataStorage;
    DEBUG_MODE = false;
    dataStorage = {
      fetch: function() {
        var data;
        data = Gamedata["default"];
        if (localStorage.getItem(Gamedata.key)) {
          data.player = JSON.parse(localStorage.getItem(Gamedata.key));
        }
        return data;
      },
      save: function(data) {
        return localStorage.setItem(Gamedata.key, JSON.stringify(data));
      },
      reset: function() {
        return localStorage.removeItem(Gamedata.key);
      }
    };
    clone = function(src) {
      return JSON.parse(JSON.stringify(src));
    };
    Vue.directive('available', function(value) {
      return this.el.disabled = !value;
    });
    return app = new Vue({
      el: "#app",
      data: dataStorage.fetch(),
      methods: {
        solve: function(problem) {
          var addGood, changeGoods, countedTime, counting, player;
          player = this.player;
          addGood = function(g, isTake) {
            var added, goodToAdd, goods, index, number, _i, _len, _ref;
            goodToAdd = clone(g);
            number = 0;
            if (isTake) {
              number = -1 * (goodToAdd.number || 1);
            } else {
              number = goodToAdd.number || 1;
            }
            added = false;
            _ref = player.goods;
            for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
              goods = _ref[index];
              if (goodToAdd.name === goods.name) {
                if (!goods.number) {
                  goods.number = number + 1;
                } else {
                  goods.number = goods.number + number;
                }
                if (goods.number === 0) {
                  player.goods.splice(index, 1);
                }
                added = true;
                break;
              }
            }
            if (!added) {
              return player.goods.push(goodToAdd);
            }
          };
          changeGoods = function() {
            var gain, take, _i, _j, _len, _len1, _ref, _ref1, _results;
            if (problem.gain) {
              _ref = problem.gain;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                gain = _ref[_i];
                addGood(gain);
              }
            }
            if (problem.take) {
              _ref1 = problem.take;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                take = _ref1[_j];
                _results.push(addGood(take, true));
              }
              return _results;
            }
          };
          countedTime = 0;
          problem.counting = true;
          problem.percent = 0;
          return counting = setInterval(function() {
            countedTime += 1;
            if (DEBUG_MODE) {
              countedTime += 10;
            }
            problem.percent = (countedTime / problem.time).toFixed(4);
            if (countedTime >= problem.time) {
              clearInterval(counting);
              problem.counting = false;
              if (problem.reset) {
                player.level = 0;
                player.goods = [];
                dataStorage.save(player);
                return true;
              }
              changeGoods();
              if (problem.growth) {
                player.level += 1;
              }
              return dataStorage.save(player);
            }
          }, 100);
        }
      },
      filters: {
        levelFilter: function(problems) {
          var player;
          player = this.player;
          return problems.filter(function(problem) {
            var _ref;
            if (!problem.level) {
              return true;
            }
            return _ref = player.level, __indexOf.call(problem.level, _ref) >= 0;
          });
        },
        requireFilter: function(problems) {
          var one, playerGoods;
          playerGoods = (function() {
            var _i, _len, _ref, _results;
            _ref = this.player.goods;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              one = _ref[_i];
              _results.push(one.name);
            }
            return _results;
          }).call(this);
          return problems.filter(function(problem) {
            var r, _i, _j, _len, _len1, _ref, _ref1;
            if (!problem.require && !problem.dismiss) {
              return true;
            }
            if (problem.require) {
              _ref = problem.require;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                r = _ref[_i];
                if (__indexOf.call(playerGoods, r) < 0) {
                  return false;
                }
              }
            }
            if (problem.dismiss) {
              _ref1 = problem.dismiss;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                r = _ref1[_j];
                if (__indexOf.call(playerGoods, r) >= 0) {
                  return false;
                }
              }
            }
            return true;
          });
        },
        defaultOne: function(number) {
          return number || 1;
        },
        percentage: function(n) {
          return (Math.floor(n * 10000) / 100).toFixed(1) + "%";
        },
        solveAvailability: function(takes, key) {
          var getGoodsNumer, player, take, _i, _len;
          if (this[key]) {
            return false;
          }
          player = this.$root.player;
          getGoodsNumer = function(good) {
            var g, _i, _len, _ref;
            _ref = player.goods;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              g = _ref[_i];
              if (g.name === good.name) {
                return g.number || 1;
              }
            }
            return 0;
          };
          if (!takes) {
            return true;
          }
          for (_i = 0, _len = takes.length; _i < _len; _i++) {
            take = takes[_i];
            if (take.number > getGoodsNumer(take)) {
              return false;
            }
          }
          return true;
        }
      }
    });
  });

}).call(this);

//# sourceMappingURL=app.map
